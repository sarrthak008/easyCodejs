JavaScript Conditional Statements: if, else if, else
====================================================

Conditional statements are fundamental building blocks in programming. They allow your code to make decisions and execute different blocks of code based on whether certain conditions are true or false. In JavaScript, the primary way to do this is using `if`, `else if`, and `else`.

--- The 'if' Statement ---

Purpose:
Executes a block of code *only if* a specified condition evaluates to `true`.

Syntax:
if (condition) {
  // Code to execute if the condition is true
}

Explanation:
- `if`: Keyword that starts the conditional statement.
- `(condition)`: An expression placed inside parentheses that evaluates to either `true` or `false` (a boolean value). This often involves comparison operators (e.g., `>`, `<`, `===`, `!==`) or logical operators (e.g., `&&`, `||`, `!`).
- `{ ... }`: Curly braces define the block of code that will run if the condition is `true`.

Example:
let temperature = 25;

if (temperature > 20) {
  console.log("It's a warm day!");
  // This line will be printed because 25 > 20 is true.
}

if (temperature < 10) {
  console.log("It's quite cold.");
  // This line will NOT be printed because 25 < 10 is false.
}


--- The 'if...else' Statement ---

Purpose:
Executes one block of code if a condition is `true` and a *different* block of code if the condition is `false`. It provides an alternative path.

Syntax:
if (condition) {
  // Code to execute if the condition is true
} else {
  // Code to execute if the condition is false
}

Explanation:
- The `if` part works the same as before.
- `else`: Keyword that introduces the block of code to run when the `if` condition is `false`.
- The `else` block is executed *only* if the `if` condition evaluates to `false`.

Example:
let age = 16;

if (age >= 18) {
  console.log("You are eligible to vote.");
} else {
  console.log("You are not yet eligible to vote.");
  // This line will be printed because 16 >= 18 is false.
}


--- The 'if...else if...else' Statement ---

Purpose:
Allows you to check multiple conditions in sequence. It executes the block of code associated with the *first* condition that evaluates to `true`. An optional final `else` block can run if *none* of the preceding `if` or `else if` conditions are true.

Syntax:
if (condition1) {
  // Code to execute if condition1 is true
} else if (condition2) {
  // Code to execute if condition1 is false AND condition2 is true
} else if (condition3) {
  // Code to execute if condition1 and condition2 are false AND condition3 is true
} else {
  // Code to execute if ALL preceding conditions (1, 2, 3...) are false
  // The final 'else' is optional.
}

Explanation:
- The conditions are checked one by one from top to bottom.
- As soon as a condition evaluates to `true`, its corresponding code block is executed, and the rest of the `else if` / `else` chain is skipped.
- If none of the `if` or `else if` conditions are `true`, the final `else` block (if present) is executed.

Example:
let score = 75;
let grade;

if (score >= 90) {
  grade = 'A';
} else if (score >= 80) {
  grade = 'B';
} else if (score >= 70) {
  grade = 'C'; // This block executes because 75 >= 90 is false, 75 >= 80 is false, but 75 >= 70 is true.
} else if (score >= 60) {
  grade = 'D';
} else {
  grade = 'F';
}

console.log("Your grade is: " + grade); // Output: Your grade is: C


--- Key Takeaways ---

- Use `if` to execute code based on a single condition.
- Use `if...else` to choose between two different code paths.
- Use `if...else if...else` to choose between multiple code paths based on the first true condition found.
- Conditions must evaluate to `true` or `false`.
- Only one block of code within a single `if...else if...else` chain will ever be executed.
- Curly braces `{}` are highly recommended, even for single-line blocks, to improve readability and prevent errors.
